===================
Variables
===================

10 A = 100: B = 010
20 LET A$ = "Howard Phillips Lovecraft"

---

(source_file
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (integer)))
		(sep_statement)
		(statement (assignment_int (int_name) (op_eq_assign_int) (integer))))
	(line
		(linenum)
		(statement (assignment_str (statement_let) (str_name (dollar)) (op_eq_assign_str) (string (quote) (unquote))))))

===================
Unary Operators
===================

10 X = +Y
20 X = -Y
30 X = NOT Y

---

(source_file
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (unary_aexpr (op_unary_plus) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (unary_aexpr (op_unary_minus) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (unary_aexpr (op_not) (int_name))))))

===================
Binary Operators
===================

10 X = X + Y
20 X = X - Y
30 X = X * Y
40 X = X / Y
50 X = X ^ Y
60 X = X = Y
70 X = X < Y
80 X = X > Y
90 X = X <= Y
100 X = X >= Y
130 X = X <> Y
150 X = X AND Y
160 X = X OR Y

---

(source_file
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_plus) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_minus) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_times) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_div) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_pow) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_aeq) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_less) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_gtr) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_lesseq) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_gtreq) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_neq) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_and) (int_name)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (binary_aexpr (int_name) (op_or) (int_name))))))


===================
Precedence Test 1
===================

10 X = A+B*C

---

(source_file
	(line
		(linenum)
		(statement
			(assignment_int
				(int_name) (op_eq_assign_int)
				(binary_aexpr
					(int_name) (op_plus)
					(binary_aexpr (int_name) (op_times) (int_name)))))))

===================
Precedence Test 2
===================

10 X = (A+B)*C

---

(source_file
	(line
		(linenum)
		(statement
			(assignment_int
				(int_name) (op_eq_assign_int)
				(binary_aexpr
					(open_aexpr)
					(binary_aexpr (int_name) (op_plus) (int_name))
					(close)
					(op_times)
					(int_name))))))

===================
Precedence Test 3
===================

10 X = A <= B + C

---

(source_file
	(line
		(linenum)
		(statement
			(assignment_int
				(int_name) (op_eq_assign_int)
				(binary_aexpr
					(int_name)
					(op_lesseq)
					(binary_aexpr (int_name) (op_plus) (int_name)))))))

===================
Math Functions
===================

10 XA = ABS(X1+X2)
20 Y = SGN(X)

---

(source_file
	(line
		(linenum)
		(statement
			(assignment_int
				(int_name) (op_eq_assign_int)
				(fcall
					(fcall_abs)
					(open_fcall)
					(binary_aexpr (int_name) (op_plus) (int_name))
					(close)))))
	(line (linenum) (statement (assignment_int (int_name) (op_eq_assign_int) (fcall (fcall_sgn) (open_fcall) (int_name) (close))))))

===================
Random Numbers
===================

10 X = RND(-5)
20 X = RND ( 0 )
30 X = RND(99)

---

(source_file
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (fcall (fcall_rnd) (open_fcall) (unary_aexpr (op_unary_minus) (integer)) (close)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (fcall (fcall_rnd) (open_fcall) (integer) (close)))))
	(line
		(linenum)
		(statement (assignment_int (int_name) (op_eq_assign_int) (fcall (fcall_rnd) (open_fcall) (integer) (close))))))


===================
Nested Expressions
===================

10 X = ((1-5)*ABS(ZA) + SGN(AB))/((1+5)*PEEK(X+Y)-(ZB+A*B))

---

(source_file
	(line
		(linenum)
		(statement
			(assignment_int
				(int_name) (op_eq_assign_int)
				(binary_aexpr
					(open_aexpr)
					(binary_aexpr
						(binary_aexpr
							(open_aexpr)
							(binary_aexpr (integer) (op_minus) (integer))
							(close)
							(op_times)
							(fcall (fcall_abs) (open_fcall) (int_name) (close)))
						(op_plus)
						(fcall (fcall_sgn) (open_fcall) (int_name) (close)))
					(close)
					(op_div)
					(open_aexpr)
					(binary_aexpr
						(binary_aexpr
							(open_aexpr)
							(binary_aexpr (integer) (op_plus) (integer))
							(close)
							(op_times)
							(fcall (fcall_peek) (open_fcall) (binary_aexpr (int_name) (op_plus) (int_name)) (close)))
						(op_minus)
						(open_aexpr)
						(binary_aexpr
							(int_name)
							(op_plus)
							(binary_aexpr (int_name) (op_times) (int_name)))
						(close))
					(close))))))
